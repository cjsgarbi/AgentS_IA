"""üîç Web Research Agent - Your AI Research Assistant!

This example shows how to create an AI agent that can search the web for information.
We'll create a research assistant that combines web search with natural conversation.
This demonstrates how to use tools to extend an agent's capabilities.

Example prompts to try:
- "Quais s√£o as √∫ltimas not√≠cias sobre IA no Brasil?"
- "Me fale sobre as tend√™ncias de tecnologia em 2024"
- "O que est√° acontecendo no mundo dos esportes hoje?"
- "Quais s√£o as previs√µes econ√¥micas para este ano?"

Run `pip install agno google-generativeai duckduckgo-search` to install dependencies.
"""

import os
from textwrap import dedent
from agno.agent import Agent
from agno.models.gemini import GeminiChat
from agno.tools.duckduckgo import DuckDuckGoTools
import sys
from agno.utils.cleanup import with_graceful_exit
import google.generativeai as genai


@with_graceful_exit
def main():
    # Verificar API Key
    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        print("‚ö†Ô∏è Por favor, configure a vari√°vel de ambiente GOOGLE_API_KEY")
        sys.exit(1)

    # Configurar o Gemini
    genai.configure(api_key=api_key)

    # Apresenta√ß√£o inicial limpa
    print(dedent("""
    üîç Agente Pesquisador - Seu Assistente de Pesquisa Virtual! üîç

    Ol√°! Eu sou seu assistente de pesquisa, especializado em buscar e analisar 
    informa√ß√µes da web de forma r√°pida e precisa. Posso pesquisar qualquer 
    assunto e trazer as informa√ß√µes mais relevantes e atualizadas!

    Como me usar:
    - Me fa√ßa perguntas sobre qualquer assunto
    - Pe√ßa por informa√ß√µes atualizadas sobre temas espec√≠ficos
    - Digite 'sair' para encerrar nossa conversa

    Vamos come√ßar? Me fa√ßa uma pergunta! üìö
    """).strip() + "\n\n")

    try:
        # Criar o agente pesquisador com o modelo Gemini
        chat_model = GeminiChat(model_id="gemini-pro")

        agent = Agent(
            model=chat_model,
            tools=[DuckDuckGoTools()],
            instructions=dedent("""\
                Voc√™ √© um pesquisador entusiasmado com talento para explicar! üîç
                Pense em si mesmo como uma mistura de jornalista investigativo e professor.

                Seu guia de estilo:
                - Comece com um t√≠tulo chamativo usando emoji
                - Fa√ßa buscas precisas para encontrar informa√ß√µes atualizadas
                - Organize as informa√ß√µes de forma clara e concisa
                - Use linguagem acess√≠vel e exemplos pr√°ticos
                - Termine com uma conclus√£o relevante e uma despedida amig√°vel

                Lembre-se:
                - Sempre verifique as fontes
                - Priorize informa√ß√µes recentes e confi√°veis
                - Mantenha um tom profissional mas amig√°vel
                - Use exemplos do contexto brasileiro quando poss√≠vel\
            """),
            markdown=True,
            show_tool_calls=True,
            add_references=True
        )

        # Loop interativo
        while True:
            user_input = input(
                "\nSua pergunta (ou 'sair' para terminar): ").strip()

            if not user_input or user_input.lower() in ['sair', 'exit', 'quit']:
                break

            agent.print_response(user_input)

    except KeyboardInterrupt:
        pass
    except Exception as e:
        print(f"\nOcorreu um erro: {str(e)}")
    finally:
        print("\nEncerrando o pesquisador... Foi um prazer ajudar voc√™! üéì")
        sys.exit(0)


if __name__ == "__main__":
    main()

# More example prompts to try:
"""
Try these engaging news queries:
1. "What's the latest development in NYC's tech scene?"
2. "Tell me about any upcoming events at Madison Square Garden"
3. "What's the weather impact on NYC today?"
4. "Any updates on the NYC subway system?"
5. "What's the hottest food trend in Manhattan right now?"
"""
